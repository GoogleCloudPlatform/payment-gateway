// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.paymentgateway.issuerswitch.adapter.bank.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

option java_outer_classname = "CommonTypesProto";
option java_multiple_files = true;
option java_package = "com.google.cloud.paymentgateway.issuerswitch.adapter.bank.v1";

// Provides additional reason about a particular error response returned by the
// Bank Adapter. Not all reasons can be returned by all APIs. The list of
// reasons that can be returned by a particular API are documented along with
// the API.
//
// For any API, if the bank adapter returns an error reason that is not
// acceptable for that particular API, then the Google Cloud Issuer Gateway
// will default to INVALID_TRANSACTION.
enum ErrorReason {
  // Unspecified error reason.
  ERROR_REASON_UNSPECIFIED = 0;
  // The account under consideration for the operation is blocked (as defined
  // by the bank's policies).
  ACCT_BLOCKED = 1;
  // The account under consideration for the operation is dormant (as defined
  // by the bank's policies).
  ACCT_DORMANT = 2;
  // The account under consideration for the operation is frozen (as defined
  // by the bank's policies).
  ACCT_FROZEN = 3;
  // The account under consideration for the operation is inactive (as defined
  // by the bank's policies).
  ACCT_INACTIVE = 4;
  // The account under consideration for the operation is invalid (as defined
  // by the bank's policies).
  ACCT_INVALID = 5;
  // The account is associated with multiple customers.
  ACCT_MULTIPLE_CUSTOMERS = 6;
  // The account details specified are invalid and not found in the bank's
  // systems.
  ACCT_NOT_FOUND = 7;
  // The debit/credit card has expired.
  EXPIRED_CARD = 8;
  // The bank card management system is down.
  CARD_MANAGEMENT_SYSTEM_FAILURE = 9;
  // The debit/credit card is inactive.
  INACTIVE_CARD = 10;
  // The PIN provided is incorrect.
  INCORRECT_PIN = 11;
  // The OTP provided is invalid.
  INCORRECT_OTP = 12;
  // The funds in the bank account are insufficient to perform the requested
  // operation.
  INSUFFICIENT_FUNDS = 13;
  // The debit/credit card is invalid.
  INVALID_CARD = 14;
  // The parameters provided are invalid.
  INVALID_PARAMETERS = 15;
  // The path invoked is not supported by the Bank Adapter service.
  INVALID_PATH = 16;
  // The requested transaction is invalid and will not be performed.
  INVALID_TRANSACTION = 17;
  // The maximum allowed balance for the account has been exceeded.
  MAX_BALANCE_EXCEEDED = 18;
  // More than one customer is associated with the same mobile number.
  MOBILE_NUMBER_MULTIPLE_CUSTOMERS = 19;
  // The OTP provided has expired.
  OTP_EXPIRED = 20;
  // The debit/credit card is restricted.
  RESTRICTED_CARD = 21;
  // The requested operation could not be performed because of an error/bug in
  // the Bank Adapter service.
  SERVICE_ERROR = 22;
  // The requested operation could not be performed because the Bank Adapter
  // service or one or more of the bank's services are unavailable.
  SERVICE_UNAVAILABLE = 23;
  // The requested transaction is not permitted.
  TRANSACTION_NOT_PERMITTED = 24;
  // The requested settle/resolve payment could not be performed because the
  // Bank Adapter service was unable to update the bank's services. This error
  // code maps to the `UT1` error code as defined in NPCI's `UDIR`
  // specification.
  UNABLE_TO_UPDATE_BANK_SERVICES = 25;
  // The requested settle/resolve payment could not be performed because of
  // party instructions. This error code maps to the `UT3` error code as defined
  // in NPCI's `UDIR` specification.
  PARTY_INSTRUCTIONS = 26;
  // The requested settle/resolve payment could not be performed because of
  // duplicate processing. This error code maps to the `UT5` error code as
  // defined in NPCI's `UDIR` specification.
  DUPLICATE_PROCESSING = 27;
  // The requested settle/resolve payment (credit) operation could not be
  // performed because the payee account is closed, and a reversal needs to be
  // initiated. This error code maps to code `114` defined in NPCI's
  // `UDIR` specification.
  PAYMENT_UDIR_RET_ACCOUNT_CLOSED = 28;
  // The requested settle/resolve payment (credit) operation could not be
  // performed because the payee account does not exist, and a reversal needs to
  // be initiated. This error code maps to code `115` defined in NPCI's
  // `UDIR` specification.
  PAYMENT_UDIR_RET_ACCOUNT_DOES_NOT_EXIST = 29;
  // The requested settle/resolve payment (credit) operation could not be
  // performed because of party instructions, and a reversal needs to be
  // initiated. This error code maps to code `116` defined in NPCI's `UDIR`
  // specification.
  PAYMENT_UDIR_RET_PARTY_INSTRUCTIONS = 30;
  // The requested settle/resolve payment (credit) operation could not be
  // performed because the payee account is a NRI account, and a reversal needs
  // to be initiated. This error code maps to code `117` defined in NPCI's
  // `UDIR` specification.
  PAYMENT_UDIR_RET_NRI_ACCOUNT = 31;
  // The requested settle/resolve payment (credit) operation could not be
  // performed because the payee account has credit freezed, and a reversal
  // needs to be initiated. This error code maps to code `118` defined in NPCI's
  // `UDIR` specification.
  PAYMENT_UDIR_RET_CREDIT_FREEZED = 32;
  // The requested settle/resolve payment (credit) operation could not be
  // performed because of invalid payee details, and a reversal needs to be
  // initiated. This error code maps to code `119` defined in NPCI's `UDIR`
  // specification.
  PAYMENT_UDIR_RET_INVALID_BENEFICIARY_DETAILS = 33;
  // The requested settle/resolve payment (credit) operation could not be
  // performed because of other errors, and a reversal needs to be initiated.
  // This error code maps to code `120` defined in NPCI's `UDIR` specification.
  PAYMENT_UDIR_RET_OTHERS = 34;
  // The requested operation could not be performed because the Bank Adapter
  // service or one or more of the bank's services timed out.
  SERVICE_TIMEOUT = 35;
  // Hold funds not allowed for certain types of accounts (like CC, PF, PPF
  // accounts) as per bank's policy.
  HOLD_FUNDS_NOT_ALLOWED = 36;
  // Debit is not allowed on this type of account.
  DEBIT_NOT_ALLOWED = 37;
  // The funds are not on hold in the account.
  FUNDS_NOT_ON_HOLD = 38;
  // The requested transaction is suspected to be fraudulent due to high risk
  // score.
  FRAUDULENT_TRANSACTION = 39;
  // The registered mobile number linked to the account has been changed or
  // removed.
  REGISTERED_MOBILE_NUMBER_CHANGED = 40;
  // The requested settle payment operation could not be performed as it was
  // stopped by a court order.
  STOPPED_BY_COURT_ORDER = 41;
  // The maximum number of OTP requests has been exceeded.
  OTP_REQUESTS_EXCEEDED = 42;
  // The funds in the bank account are insufficient to perform the requested
  // operation as funds are on hold in the account.
  INSUFFICIENT_FUNDS_DUE_TO_HOLD = 43;
  // The requested operation could not be performed because the Bank Adapter
  // service could not encrypt the payload.
  ENCRYPTION_FAILED = 44;
  // The requested operation could not be performed because the Bank Adapter
  // service could not decrypt the payload.
  DECRYPTION_FAILED = 45;
  // Operations on the account are not possible due to the account holder's
  // death.
  ACCT_HOLDER_DEATH = 46;
  // Operations on the account are not possible due to the account holder's
  // lunacy.
  ACCT_HOLDER_LUNACY = 47;
  // Operations on the account are not possible due to the account holder's
  // insolvency.
  ACCT_HOLDER_INSOLVENCY = 48;
  // The requested settle payment operation could not be performed as it was
  // stopped by an attachment order.
  STOPPED_BY_ATTACHMENT_ORDER = 49;
  // Cutoff is in process in the bank's systems due to which the operation
  // cannot be performed.
  CUTOFF_IN_PROCESS = 50;
}

// Unique identification of an account according to India's UPI standards.
message AccountReference {
  // IFSC of an account's bank branch.
  string ifsc = 1 [(google.api.field_behavior) = REQUIRED];
  // Type of account.
  string account_type = 2;
  // Unique number for the account in a bank and branch.
  string account_number = 3 [(google.api.field_behavior) = REQUIRED];
  // Metadata of an account reference.
  message Metadata {
    // Additional metadata about a particular account as key-value pairs.
    // The following restrictions apply on the values in this map:
    //
    // 1. There is a limit on the number of key-value pairs that can be present
    // in this map. This value is configurable on the issuer switch instance and
    // defaults to 5 pairs.
    // 1. There is a limit on the length of each key in the map. This value is
    // configurable on the issuer switch instance and defaults to 100
    // characters.
    // 1. There is a limit on the length of each value in the map. This value is
    // configurable on the issuer switch instance and defaults to 500
    // characters.
    map<string, string> values = 1 [(google.api.field_behavior) = REQUIRED];
  }
  // Additional metadata about the account.
  //
  // Bank adapters return the value for this metadata in the response to the
  // [SearchAccounts][google.cloud.paymentgateway.issuerswitch.adapter.bank.v1.BankAdapterService.SearchAccounts]
  // method or in the response to the
  // [InitiateRegistration][google.cloud.paymentgateway.issuerswitch.adapter.bank.v1.BankAdapterService.InitiateRegistration]
  // method. The issuer switch will persist this information and include it in
  // all subsequent calls where operations are triggered on behalf of the user
  // owning the account.
  Metadata metadata = 4;
}

// The combination of a reference type and reference number that uniquely
// identifies a bank customer. The customer can either be a physical person or a
// business.
message CustomerReference {
  // Types of identification used to uniquely identify a bank's customer.
  ReferenceType reference_type = 1 [(google.api.field_behavior) = REQUIRED];
  // The value identifying the customer. The type of the value will be based on
  // the referenceType field.
  //
  // When using `mobile_phone_number` as the reference type, this value will
  // contain a mobile phone number including country code.
  //
  // When using `resident_id` as the reference type, this value will
  // contain a given's country unique identification number, such as Aadhaar
  // number in India.
  string reference_value = 2 [(google.api.field_behavior) = REQUIRED];
  // Types of identification used to uniquely identify a bank's customer. The
  // admissible values will evolve over time.
  enum ReferenceType {
    // Unspecified reference type.
    REFERENCE_TYPE_UNSPECIFIED = 0;
    // Mobile phone number as reference.
    MOBILE_PHONE_NUMBER = 1;
    // Unique identifier used to identify residents of a country such as Aadhaar
    // in India or SSN in the USA.
    RESIDENT_ID = 2;
  }
}

// Represents a monetary amount in a given currency.
message Amount {
  // The 3-letter currency code as defined in ISO 4217.
  string currency_code = 1 [(google.api.field_behavior) = REQUIRED];
  // The amount with fractional digits, where fractions can have between 2 and 4
  // digits. Negative amounts are represented with a prefix -ve sign. The
  // decimal separator is a dot. In India, only 2 digits will be used after the
  // decimal separator.
  string amount = 2 [(google.api.field_behavior) = REQUIRED];
}

// Risk information specific to India's UPI Standards.
message RiskInfo {
  // Entity providing the risk score. This could either be the payment service
  // provider or the payment orchestrator.
  string risk_score_provider = 1;
  // Numeric value of risk evaluation ranging from 0 (No Risk) to 100 (Maximum
  // Risk).
  string risk_score_value = 2;
  // Type of risk. Examples include `TXNRISK`.
  string risk_type = 3;
}

// The type of the customer.
enum Persona {
  // Unspecified persona.
  PERSONA_UNSPECIFIED = 0;
  // Customer is a person.
  PERSON = 1;
  // Customer is an entity.
  ENTITY = 2;
}

// Details about the device that a participant in an API transaction is using.
message DeviceDetails {
  // The payment application on the device.
  string payment_app = 1;

  // The capability of the device.
  string capability = 2;

  // The geo-code of the device. This will be a comma-separated value of the
  // latitude and longitude of the device.
  string geo_code = 3;

  // The device's ID.
  string id = 4;

  // The device's IP address.
  string ip_address = 5;

  // The coarse location of the device.
  string location = 6;

  // The operating system on the device.
  string operating_system = 7;

  // The device's telecom provider.
  string telecom_provider = 8;

  // The type of device.
  string type = 9;
}

// Information about a person or entity participating in a transaction.
message Participant {
  // The virtual payment address (VPA) of the settlement participant.
  string virtual_payment_address = 1 [(google.api.field_behavior) = REQUIRED];
  // The type of the participant. Could either a person or an entity.
  Persona persona = 2 [(google.api.field_behavior) = REQUIRED];
  // The name of the participant.
  string name = 3;
  // The combination of a reference type and reference number that uniquely
  // identifies a bank customer. The Issuer Switch populates this field with the
  // customer's unique resident identifier (like India's Aadhaar) or mobile
  // number.
  CustomerReference customer_reference = 4
      [(google.api.field_behavior) = REQUIRED];
  // Optional details of the device used by a participant in an API transaction.
  DeviceDetails device_details = 5;
}

// The name of a merchant who is a party in a payment settlement. Includes
// multiple possible names for the merchant.
message MerchantName {
  // The name the merchant is commonly known as.
  string brand = 1;
  // The merchant's Legal Name.
  string legal = 2;
  // The franchise name under which the merchant operates.
  string franchise = 3;
}

// Additional merchant information specific to India's UPI requirements.
message MerchantAdditionalInfo {
  // Indicates whether it is a small or large merchant.
  enum Type {
    // Unspecified merchant type.
    TYPE_UNSPECIFIED = 0;
    // Small merchant.
    SMALL = 1;
    // Large merchant.
    LARGE = 2;
  }

  // Indicates whether it is an online or offline merchant.
  enum Genre {
    // Unspecified merchant genre.
    GENRE_UNSPECIFIED = 0;
    // Online merchant.
    ONLINE = 1;
    // Offline merchant
    OFFLINE = 2;
  }

  // Indicates whether the merchant has been onboarded by a bank or an
  // aggregator.
  enum OnboardingType {
    // Unspecified merchant onboarding type.
    ONBOARDING_TYPE_UNSPECIFIED = 0;
    // Onboarded by bank.
    BANK = 1;
    // Onboarded by aggreagator.
    AGGREGATOR = 2;
    // Onboarded by network.
    NETWORK = 3;
    // Onboarded by TPAP.
    TPAP = 4;
  }

  // Indicates the type of ownership for the merchant.
  enum OwnershipType {
    // Unspecified merchant ownership type.
    OWNERSHIP_TYPE_UNSPECIFIED = 0;
    // Properiety ownership.
    PROPRIETARY = 1;
    // Partnership ownership.
    PARTNERSHIP = 2;
    // Public ownership.
    PUBLIC = 3;
    // Private ownership.
    PRIVATE = 4;
    // Other ownership model.
    OTHERS = 5;
  }
  // Merchant Category code as specified by UPI (A four-digit number listed in
  // ISO 18245 for retail financial services).
  string category_code = 1 [(google.api.field_behavior) = REQUIRED];
  // A unique identifier for the merchant store where the payment occurs.
  string store_id = 2;
  // A unique identifier for the POS terminal in the store where the payment
  // occurs.
  string terminal_id = 3;
  // Indicates the type of merchant.
  Type type = 4;
  // Indicates the genre of the merchant.
  Genre genre = 5;
  // Indicates by whom the merchant has been onboarded.
  OnboardingType onboarding_type = 6;
  // Indicates the type of ownership for the merchant.
  OwnershipType ownership_type = 7;
  // Additional information about the merchant.
  map<string, string> additional_info = 8;
}

// Information about a merchant entity participating in a payment settlement.
message MerchantInfo {
  // A unique identifier for the merchant.
  string id = 1;
  // The name of the merchant who is a party in the payment. Includes multiple
  // possible names for the merchant.
  MerchantName name = 2;
  // India specific merchant additional information.
  MerchantAdditionalInfo additional_info = 3;
}

// Contains all information about a participant in a payment settlement (either
// the payer or the payee).
message SettlementParticipant {
  // The participant information.
  Participant participant = 1 [(google.api.field_behavior) = REQUIRED];
  // Unique identification of an account according to India's UPI standards.
  AccountReference account = 2 [(google.api.field_behavior) = REQUIRED];
  // Information about a merchant who is a participant in the payment. This
  // field will be specified only if the participant is a merchant.
  MerchantInfo merchant_info = 3;
}

// Additional payment information specific to India's UPI requirements.
message PaymentAdditionalInfo {
  // Indicates who initiated the payment.
  enum SubType {
    // Unspecified sub-type.
    SUB_TYPE_UNSPECIFIED = 0;
    // Pay subtype - initiated by payer.
    PAY = 1;
    // Collect subtype - initiated by payee.
    COLLECT = 2;
    // Refund subtype - initiated by payee.
    REFUND = 3;
  }

  // Consumer reference number to identify (like Loan number, etc).
  string consumer_reference_number = 1;
  // A reference URL for the settlement.
  string reference_link = 2;
  // Settlement origination date/time as specified by the message originator.
  // Formatted as specified in RFC 3339.
  google.protobuf.Timestamp date_time = 3
      [(google.api.field_behavior) = REQUIRED];
  // Indicates if the payment initiated by the payer (pay) or the payee
  // (collect).
  SubType sub_type = 6 [(google.api.field_behavior) = REQUIRED];
  // Specifies how the payment was inititated.
  string initiation_mode = 7 [(google.api.field_behavior) = REQUIRED];
  // The purpose of the transaction.
  string purpose = 8 [(google.api.field_behavior) = REQUIRED];
  // If **referenceLink** is present, then this field is mandatory. The field is
  // used to identify the category of the transaction.
  string reference_category = 10;
  // More information about the payment.
  map<string, string> miscellaneous = 11;
}

// Specifies the amount to be held and the holding rule.
message HoldAmount {
  // The holding rule for the hold funds request.
  enum HoldingRule {
    // Unspecified holding rule.
    HOLDING_RULE_UNSPECIFIED = 0;
    // Rule specifying that the exact amount is to be held.
    EXACT = 1;
    // Rule specifying the maximum amount to be held.
    MAX = 2;
  }
  // The amount to be held in the account.
  Amount instructed_amount = 1 [(google.api.field_behavior) = REQUIRED];
  // The holding rule.
  HoldingRule holding_rule = 2 [(google.api.field_behavior) = REQUIRED];
}

// Specifies the amount held and the holding reference.
message HoldDetails {
  // The bank's reference for the funds held in the account.
  string reference = 1 [(google.api.field_behavior) = REQUIRED];
  // The amount held in the account.
  HoldAmount amount = 2 [(google.api.field_behavior) = REQUIRED];
  // An identifier for the original hold request. In UPI, this field maps to the
  // Unified Mandate Number (UMN).
  string request_id = 3 [(google.api.field_behavior) = REQUIRED];
}

// Provides details of the case raised by a user / remitter bank.
message CaseDetails {
  // The type of case raised.
  enum CaseType {
    // Unspecified case type.
    CASE_TYPE_UNSPECIFIED = 0;
    // Complaint.
    COMPLAINT = 1;
    // Dispute.
    DISPUTE = 2;
    // Refund.
    REFUND = 3;
    // Reversal.
    REVERSAL = 4;
    // Check Status.
    CHKSTATUS = 5;
  }

  // Reason of the case raised.
  enum CaseReason {
    // Case reason unspecified.
    CASE_REASON_UNSPECIFIED = 0;
    // This indicates that a complaint is raised as goods or services are not
    // provided to payer for approved transaction. This maps to reason code
    // `U008` defined in NPCI's `UDIR` specification.
    COMPLAINT_RAISE_GOODS_SERVICES_NOT_PROVIDED = 1;
    // This indicates that a complaint is raised as payer credit is not
    // processed for cancelled or returned goods & services. This maps to reason
    // code `U021` defined in NPCI's `UDIR` specification.
    COMPLAINT_RAISE_PAYER_CREDIT_NOT_RECEIVED_FOR_CANCELLED_GOODS_AND_SERVICES =
        2;
    // This indicates that a complaint is raised as payer account is debited but
    // transaction confirmation not received at merchant location. This maps to
    // reason code `U022` defined in NPCI's `UDIR` specification.
    COMPLAINT_RAISE_MERCHANT_ACCOUNT_NOT_CREDITED = 3;
    // This indicates that a complaint is raised as payer account is not
    // credited back for declined merchant transaction. This maps to reason code
    // `U009` defined in NPCI's `UDIR` specification.
    COMPLAINT_RAISE_PAYER_CREDIT_NOT_RECEIVED_FOR_DECLINED_MERCHANT_TRANSACTION =
        4;
    // This indicates that a complaint is raised as payment was already made
    // by alternate means. This maps to reason code `U023` defined in NPCI's
    // `UDIR` specification.
    COMPLAINT_RAISE_DUPLICATE_PAYMENT = 5;
    // This indicates that a complaint is raised as payee account is not
    // credited for successful pay transaction. This maps to reason code `U010`
    // defined in NPCI's `UDIR` specification.
    COMPLAINT_RAISE_PAYEE_ACCOUNT_NOT_CREDITED = 6;
    // This indicates that a complaint is raised as payer account is not
    // credited back for declined P2P transaction. This maps to reason code
    // `U005` defined in NPCI's `UDIR` specification.
    COMPLAINT_RAISE_PAYER_CREDIT_NOT_RECEIVED_FOR_DECLINED_P2P_TRANSACTION = 7;
    // This indicates that a return is initiated as the payee account is closed.
    // This maps to reason code `114` defined in NPCI's `UDIR` specification.
    RET_ACCOUNT_CLOSED = 8;
    // This indicates that a return is initiated as the payee account does not
    // exist. This maps to reason code `115` defined in NPCI's `UDIR`
    // specification.
    RET_ACCOUNT_DOES_NOT_EXIST = 9;
    // This indicates that a return is initiated due to party instructions.
    // This maps to reason code `116` defined in NPCI's `UDIR` specification.
    RET_PARTY_INSTRUCTIONS = 10;
    // This indicates that a return is initiated as payee account is NRI
    // account. This maps to reason code `117` defined in NPCI's `UDIR`
    // specification.
    RET_NRI_ACCOUNT = 11;
    // This indicates that a return is initiated as payee account has credit
    // freezed. This maps to reason code `118` defined in NPCI's `UDIR`
    // specification.
    RET_CREDIT_FREEZED = 12;
    // This indicates that a return in initiated due to invalid payee details.
    // This maps to reason code `119` defined in NPCI's `UDIR` specification.
    RET_INVALID_BENEFICIARY_DETAILS = 13;
    // This maps to reason code `120` defined in NPCI's `UDIR` specification.
    RET_OTHERS = 14;
    // This indicates that a credit adjustment is initiated as credit was not
    // provided for cancelled goods or services. This maps to reason code `1061`
    // defined in NPCI's `UDIR` specification.
    CREDIT_ADJUSTMENT_CREDIT_NOT_RECEIVED_FOR_CANCELLED_GOODS_SERVICES = 15;
    // This indicates that a credit adjustment is initiated as goods or services
    // were defective. This maps to reason code `1062` defined in NPCI's `UDIR`
    // specification.
    CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE = 16;
    // This indicates that a credit adjustment is initiated as payment was made
    // by alternate means. This maps to reason code `1063` defined in NPCI's
    // `UDIR` specification.
    CREDIT_ADJUSTMENT_PAID_ALTERNATE_MEANS = 17;
    // This indicates that a credit adjustment is initiated as goods or services
    // were not provided. This maps to reason code `1064` defined in NPCI's
    // `UDIR` specification.
    CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_PROVIDED = 18;
    // This indicates that a credit adjustment is initiated as merchant account
    // was not credited. This maps to reason code `1065` defined in NPCI's
    // `UDIR` specification.
    CREDIT_ADJUSTMENT_MERCHANT_ACCOUNT_NOT_CREDITED = 19;
    // This indicates that a credit adjustment is initiated as there was a
    // duplicate transaction. This maps to reason code `1084` defined in NPCI's
    // `UDIR` specification.
    CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION = 20;
    // This indicates that a credit adjustment is initiated due to other
    // reasons. This maps to reason code `1090` defined in NPCI's `UDIR`
    // specification.
    CREDIT_ADJUSTMENT_OTHERS = 21;
    // This indicates that a credit adjustment is initiated as payment was made
    // to a non matching account number. This maps to reason code `1091` defined
    // in NPCI's `UDIR` specification.
    CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER = 22;
    // This indicates that a credit adjustment is initiated as the card holder
    // was charged more than the transaction amount. This maps to reason code
    // `1092` defined in NPCI's `UDIR` specification.
    CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE_THAN_AMOUNT = 23;
    // This indicates that a credit adjustment is initiated as the credit was
    // not processed. This maps to reason code `1093` defined in NPCI's `UDIR`
    // specification.
    CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED = 24;
    // This indicates that a credit adjustment is initiated as the beneficiary
    // bank was unable to update the customer account. This maps to reason code
    // `1094` defined in NPCI's `UDIR` specification.
    CREDIT_ADJUSTMENT_BENEFICIARY_UNABLE_TO_UPDATE_CUSTOMER_ACCOUNT = 25;
  }

  // Type of the case raised.
  CaseType type = 1 [(google.api.field_behavior) = REQUIRED];
  // Reason of the case raised.
  CaseReason reason = 2 [(google.api.field_behavior) = REQUIRED];
  // Specifies how the case was raised,
  string initiation_mode = 3 [(google.api.field_behavior) = REQUIRED];
  // Specifies the amount to be adjusted.
  Amount adjustment_amount = 4 [(google.api.field_behavior) = REQUIRED];
  // Settlement code of the original unresolved transaction.
  string original_settlement_code = 5 [(google.api.field_behavior) = REQUIRED];
  // Specifies if the complaint/dispute belongs to current settlement cycle or
  // not.
  bool curr_cycle = 6;
}

// Metadata about an API invocation received by the issuer switch. These are
// passed in all the requests made by the issuer switch to the bank adapter.
message InvocationMetadata {
  // A unique ID of the API invocation received by the issuer switch. In UPI,
  // this maps to the transaction ID.
  string id = 1 [(google.api.field_behavior) = REQUIRED];

  // The timestamp at which the current request was initiated/created. This is
  // the value that is provided as the initiation/creation timestamp in the
  // request received by the issuer switch.
  google.protobuf.Timestamp initiation_time = 2
      [(google.api.field_behavior) = REQUIRED];

  // A reference id for the API invocation.
  string reference_id = 3;

  // A URL as a reference to the current API invocation.
  string reference_url = 4;

  // A descriptive note about the API transaction.
  string description = 5;

  // Risk information specific to India's UPI Standards.
  repeated RiskInfo risk_info = 6;
}

// Metadata that the bank adapter wants to include in the response sent to the
// issuer switch.
message ResponseMetadata {
  // A map of name-value pairs.
  map<string, string> values = 1;
}
