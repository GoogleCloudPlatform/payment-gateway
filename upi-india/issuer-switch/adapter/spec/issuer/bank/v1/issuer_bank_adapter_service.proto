// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.paymentgateway.issuerswitch.adapter.bank.v1;

import "payment-gateway/upi-india/issuer-switch/adapter/spec/issuer/bank/v1/account_types.proto";
import "payment-gateway/upi-india/issuer-switch/adapter/spec/issuer/bank/v1/customer_types.proto";
import "payment-gateway/upi-india/issuer-switch/adapter/spec/issuer/bank/v1/payment_settlement_types.proto";
import "payment-gateway/upi-india/issuer-switch/adapter/spec/issuer/bank/v1/resolution_types.proto";
import "google/api/annotations.proto";

option java_outer_classname = "IssuerBankAdapterServiceProto";
option java_multiple_files = true;
option java_package = "com.google.cloud.paymentgateway.issuerswitch.adapter.bank.v1";

// A service interface for the Issuer Switch Bank Adapter.
service BankAdapterService {
  // Search and return a list of accounts associated with a given customer. The
  // customer may be identified in one of many ways (mobile number, email,
  // unique national id, payment address, etc).
  //
  // Accounts can be searched with one of two filters:
  //
  // 1. Customer reference - For UPI, the supported customer identifiers are
  // Mobile number or Aadhaar number. All accounts associated with the specified
  // customer identifier need to be returned. The response will be zero or more
  // accounts.
  // 2. Account reference - For UPI, this is the IFSC code and number
  // of an account. The bank adapter should search for the specified account
  // reference in the bank. The response will be either zero accounts or exactly
  // one account.
  //
  // NOTE: If no matching accounts are found for the given reference in the
  // request, the response is a success with zero accounts. This condition is
  // not an error.
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Account linked with customer identifier is blocked.
  //
  // * `ACCT_DORMANT` = Account linked with customer identifier is dormant.
  //
  // * `ACCT_FROZEN` = Account linked with customer identifier is frozen.
  //
  // * `ACCT_INACTIVE` = Account linked with customer identifier is inactive.
  //
  // * `ACCT_NOT_FOUND` = No account(s) were found in the bank's systems linked
  // with the customer identifier.
  //
  // * `ACCT_MULTIPLE_CUSTOMERS` = Indicates that the account is associated
  // with multiple customers.
  //
  // * `MOBILE_NUMBER_MULTIPLE_CUSTOMERS` = Indicates that the same mobile
  // number is associated with multiple customers in the bank's systems.
  //
  // _Note:_ This API will be invoked in the UPI `ReqListAccount` API flow.
  rpc SearchAccounts(SearchAccountsRequest) returns (SearchAccountsResponse) {
    option (google.api.http) = {
      post: "/v1/accounts:search"
      body: "*"
    };
  }

  // Retrieves the account balance information for the specified account.
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Account is blocked.
  //
  // * `ACCT_DORMANT` = Account is dormant.
  //
  // * `ACCT_FROZEN` = Account is frozen.
  //
  // * `ACCT_INACTIVE` = Account is inactive.
  //
  // * `ACCT_NOT_FOUND` = Account not found in the bank's systems.
  //
  // _Note:_ This API will be invoked in the UPI `ReqBalEnq` API flow.
  rpc RetrieveBalance(RetrieveBalanceRequest)
      returns (RetrieveBalanceResponse) {
    option (google.api.http) = {
      post: "/v1/accounts/balance:retrieve"
      body: "*"
    };
  }

  // Hold funds in the specified account.
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Account is blocked.
  //
  // * `ACCT_DORMANT` = Account is dormant.
  //
  // * `ACCT_FROZEN` = Account is frozen.
  //
  // * `ACCT_INACTIVE` = Account is inactive.
  //
  // * `ACCT_NOT_FOUND` = Account not found in the bank's systems.
  //
  // * `INSUFFICIENT_FUNDS` = Insufficient funds in account to process request.
  //
  // * `INVALID_TRANSACTION` = Invalid transaction.
  //
  // * `TRANSACTION_NOT_PERMITTED` = Requested transaction is not permitted for
  // account.
  //
  // * `HOLD_FUNDS_NOT_ALLOWED` = Hold funds is not allowed on certain account
  // types.
  //
  // * `DEBIT_NOT_ALLOWED` = Debits are not allowed on this type of account.
  //
  // _Note:_ This API will be invoked in the UPI `ReqMandate` and `ReqVoucher`
  // API flows.
  rpc HoldFunds(HoldFundsRequest) returns (HoldFundsResponse) {
    option (google.api.http) = {
      post: "/v1/accounts/funds:hold"
      body: "*"
    };
  }

  // Release funds previously held in the specified account.
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Account is blocked.
  //
  // * `ACCT_DORMANT` = Account is dormant.
  //
  // * `ACCT_FROZEN` = Account is frozen.
  //
  // * `ACCT_INACTIVE` = Account is inactive.
  //
  // * `ACCT_NOT_FOUND` = Account not found in the bank's systems.
  //
  // * `INSUFFICIENT_FUNDS` = Insufficient funds in account to process request.
  //
  // * `INVALID_TRANSACTION` = Invalid transaction.
  //
  // * `TRANSACTION_NOT_PERMITTED` = Requested transaction is not permitted for
  // account.
  //
  // * `FUNDS_NOT_ON_HOLD` = Held funds have already been released.
  //
  // _Note:_ This API will be invoked in the UPI `ReqMandate` and `ReqVoucher`
  // API flows.
  rpc ReleaseFunds(ReleaseFundsRequest) returns (ReleaseFundsResponse) {
    option (google.api.http) = {
      post: "/v1/accounts/funds:release"
      body: "*"
    };
  }

  // Request issued by the Issuer Switch for the bank to execute a single
  // payment settlement operation. The operation is either to debit a payer's
  // account or to credit a payee's account.
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Indicates that the payer account is blocked, if the
  // settlement request is for a _debit_ or that the payee account is blocked,
  // if the settlement request is for a _credit_.
  //
  // * `ACCT_DORMANT` = Indicates that the payer account is dormant, if the
  // settlement request is for a _debit_ or that the payee account is dormant,
  // if the settlement request is for a _credit_.
  //
  // * `ACCT_FROZEN` = Indicates that the payer account is frozen, if the
  // settlement request is for a _debit_ or that the payee account is frozen,
  // if the settlement request is for a _credit_.
  //
  // * `ACCT_INACTIVE` = Indicates that the payer account is inactive, if the
  // settlement request is for a _debit_ or that the payee account is inactive,
  // if the settlement request is for a _credit_.
  //
  // * `ACCT_INVALID` = Indicates that the payer account is invalid, if the
  // settlement request is for a _debit_ or that the payee account is invalid,
  // if the settlement request is for a _credit_.
  //
  // * `ACCT_NOT_FOUND` = Indicates that the payer account is not found, if the
  // settlement request is for a _debit_ or that the payee account is not found,
  // if the settlement request is for a _credit_.
  //
  // * `DEBIT_NOT_ALLOWED` = Returned if debits are not allowed on the
  // account type (such as CC, PF or PPF account).
  //
  // * `INSUFFICIENT_FUNDS` = Returned if the settlement type is _debit_ and the
  // payer's account does not have sufficient funds for the instructed amount.
  //
  // * `INVALID_TRANSACTION` = Requested settlement cannot be performed.
  //
  // * `MAX_BALANCE_EXCEEDED` = Returned if the settlement type is _credit_ and
  // the payee's account's maximum balance allowed value will be breached with
  // the instructed amount.
  //
  // * `FRAUDULENT_TRANSACTION` = Returned if the settlement type is _debit_ or
  // _credit_ and the requested transaction is suspected to be fraudulent due to
  // high risk score.
  //
  // * `REGISTERED_MOBILE_NUMBER_CHANGED` = Returned if the settlement type is
  // _debit_ or _credit_ and the registered mobile number linked to the account
  // has been changed or removed.
  //
  // * `STOPPED_BY_COURT_ORDER` = Returned if the payment settlement was stopped
  // because of a court order. This is typically used during *mandate execution*
  // and is based on circular
  // [OC-128](https://www.npci.org.in/PDF/npci/upi/circular/2021/UPI-OC-128-Extension-of-additional-response-codes-under-Deemed-Debit-for-mandate-execution.pdf)
  //
  // * `FUNDS_NOT_ON_HOLD` = Returned if the debit amount is not held for
  // the customer. This should be returned only if the *settlement type* is
  // `DEBIT` and is against funds held in the account.
  //
  // * `INSUFFICIENT_FUNDS_DUE_TO_HOLD` = Returned if adequate funds are not
  // available in the account as they have been held.
  //
  // _Note:_ This API will be invoked in the UPI `ReqPay`,
  // `ReqChkTxn-AUTOUPDATE` and `ReqComplaint` API flows.
  rpc SettlePayment(SettlePaymentRequest) returns (SettlePaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payments:settleSingle"
      body: "*"
    };
  }

  // Returns information about a specific payment. The payment to search
  // can be specified using various filter criteria. The request will contain
  // all the values that could be used to search for the payment settlement.
  //
  // If no matching payments are found, then this API must return a HTTP status
  // of 200 with an empty list of payments in the response. A non-200 HTTP
  // status must be returned only when the bank adapter service itself fails.
  //
  // _Note:_ This API will be invoked in the UPI `ReqChkTxn` (transaction type
  // `ChkTxn` or `AUTOUPDATE`) and `ReqComplaint` API flows.
  rpc SearchPayments(SearchPaymentsRequest) returns (SearchPaymentsResponse) {
    option (google.api.http) = {
      post: "/v1/payments:search"
      body: "*"
    };
  }

  // **Note**: *Implementation of this Bank Adapter API is optional. Implement
  // this API only if your bank wants to handle the unresolved payments all by
  // itself.*
  //
  // Payment settlements done using the Bank Adapter service might fail because
  // of various reasons such as time-out of the [SettlePayment][] API or network
  // failure. In the event of such a failure, the Issuer Switch does not receive
  // the final status of the payment settlement. To handle unresolved payments,
  // you can configure the Issuer Switch in either `Search & Settle` or `Resolve
  // Payment` mode.
  //
  // * `Search & Settle` - This is the default configuration of the Issuer
  // Switch. In this mode, the Issuer Switch handles the orchestration using the
  // [SearchPayments][] API to obtain the status of a payment settlement, and
  // based on the state of the payment, it invokes the [SettlePayment][] API to
  // settle the payments.
  // * `Resolve Payment` - In this mode the Issuer Switch delegates the task of
  // checking the current status of a payment settlement and its possible
  // re-execution to the bank adapter service / bank's core services. Use this
  // mode if your bank wants to handle the unresolved payments all by itself. To
  // enable this mode, you must implement the [ResolvePayment][] API. If the
  // Issuer Switch is configured in this mode, then the [ResolvePayment][] API
  // is invoked for all the unresolved transactions.
  //
  // Based on the NPCI request, the Issuer Switch invokes the [ResolvePayment][]
  // API to resolve the payment settlement transaction and obtain its final
  // status. This API is invoked to resolve a unresolved payment settlement of
  // the following types:
  //
  // * Debit Reversal
  // * Credit
  //
  // **Note:** The Issuer Switch will not invoke this API if the final status of
  // the payment settlement operation is already available with it.
  //
  // If the bank adapter service attempts to resolve the payment, but is unable
  // to resolve it successfully, then this API must return a HTTP status of 200
  // with the ResolvePaymentResponse containing [ResolutionStatus][] as FAILED
  // and the appropriate error code in [ResolvePaymentResult][]. Specifically, a
  // non-200 HTTP status must be returned only when the bank adapter service
  // itself fails and not when the resolution of the payment settlement fails.
  //
  // The [ErrorReason][] values that are allowed in the
  // [PaymentAdjustmentError][] in the [ResolvePaymentResult][] are:
  //
  //  * `ACCT_INACTIVE` = Indicates that the payer account is inactive, if the
  // settlement request is for a _debit reversal_ or that the payee account is
  // inactive, if the settlement request is for a _credit_.
  //
  // * `ACCT_FROZEN` = Indicates that the payer account is frozen, if the
  // settlement request is for a _debit reversal_ or that the payee account is
  // frozen, if the settlement request is for a _credit_.
  //
  // * `UNABLE_TO_UPDATE_BANK_SERVICES` = Indicates that the bank adapter
  // service could not update the bank's services.
  //
  // * `PARTY_INSTRUCTIONS` = Indicates that the resolution of the payment
  // failed due to party instructions.
  //
  // * `DUPLICATE_PROCESSING` = Indicates that the resolution request is a
  // duplicate.
  //
  // * `PAYMENT_UDIR_RET_114` = Indicates that the resolution failed due to
  // error `114` as part of beneficiary bank attempting to resolve a `TCC`
  // case.
  //
  // * `PAYMENT_UDIR_RET_115` = Indicates that the resolution failed due to
  // error `115` as part of beneficiary bank attempting to resolve a `TCC`
  // case.
  //
  // * `PAYMENT_UDIR_RET_116` = Indicates that the resolution failed due to
  // error `116` as part of beneficiary bank attempting to resolve a `TCC`
  // case.
  //
  // * `PAYMENT_UDIR_RET_117` = Indicates that the resolution failed due to
  // error `117` as part of beneficiary bank attempting to resolve a `TCC`
  // case.
  //
  // * `PAYMENT_UDIR_RET_118` = Indicates that the resolution failed due to
  // error `118` as part of beneficiary bank attempting to resolve a `TCC`
  // case.
  //
  // * `PAYMENT_UDIR_RET_119` = Indicates that the resolution failed due to
  // error `119` as part of beneficiary bank attempting to resolve a `TCC`
  // case.
  //
  // * `PAYMENT_UDIR_RET_120` = Indicates that the resolution failed due to
  // error `120` as part of beneficiary bank attempting to resolve a `TCC`
  // case.
  //
  // _Note:_ This API will be invoked as part of UPI's Online Dispute and Issue
  // Resolution (`UDIR`) flows. Specifically, this API will be invoked in the
  // UPI `ReqChkTxn` (transaction type `AUTOUPDATE`) and `ReqComplaint`
  // (transaction type `Complaint`) API flow.
  rpc ResolvePayment(ResolvePaymentRequest) returns (ResolvePaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payments:resolveSingle"
      body: "*"
    };
  }

  // Initiates the registration of a customer's bank account with UPI on the
  // issuer bank. Either a customer reference (such as a resident id, like
  // Aadhaar or a mobile phone number) must be specified, or a bank account
  // reference must be provided.
  //
  // It is expected that the bank adapter service will trigger an SMS OTP to be
  // sent to the customer's mobile phone.
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Account is blocked.
  //
  // * `ACCT_DORMANT` = Account is dormant.
  //
  // * `ACCT_FROZEN` = Account is frozen.
  //
  // * `ACCT_INACTIVE` = Account is inactive.
  //
  // * `ACCT_NOT_FOUND` = Account not found in the bank's systems.
  //
  // * `INVALID_CARD` = Debit/Credit card details provided are invalid.
  //
  // * `MOBILE_NUMBER_MULTIPLE_CUSTOMERS` = Mobile number is linked with
  // multiple customers.
  //
  // _Note:_ This API will be invoked in the UPI `ReqOtp` API flow.
  rpc InitiateRegistration(InitiateRegistrationRequest)
      returns (InitiateRegistrationResponse) {
    option (google.api.http) = {
      post: "/v1/users:initiateRegistration"
      body: "*"
    };
  }

  // Validates a previously initiated registration request for a customer's bank
  // account with UPI on the issuer bank. Either a customer reference (such as a
  // resident id, like Aadhaar or a mobile phone number) must be specified, or a
  // bank account reference must be provided.
  //
  // The following security details must be validated by the bank adapter
  // service with the bank's backend systems, if present in the request:
  //
  // 1. Debit/Credit card details
  // 2. PIN
  // 3. SMS OTP
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Account is blocked.
  //
  // * `ACCT_DORMANT` = Account is dormant.
  //
  // * `ACCT_FROZEN` = Account is frozen.
  //
  // * `ACCT_INACTIVE` = Account is inactive.
  //
  // * `ACCT_NOT_FOUND` = Account not found in the bank's systems.
  //
  // * `CARD_MANAGEMENT_SYSTEM_FAILURE` = Bank card management system is down.
  //
  // * `INACTIVE_CARD` = Debit/Credit card is inactive.
  //
  // * `INCORRECT_PIN` = Incorrect pin.
  //
  // * `INCORRECT_OTP` = OTP provided is incorrect.
  //
  // * `INVALID_CARD` = Debit/Credit card details provided are invalid.
  //
  // * `EXPIRED_CARD` = Debit/Credit card is expired.
  //
  // * `MOBILE_NUMBER_MULTIPLE_CUSTOMERS` = Mobile number is linked with
  // multiple customers.
  //
  // * `OTP_EXPIRED` = Specified OTP has expired.
  //
  // * `RESTRICTED_CARD` = Debit/Credit card is restricted.
  //
  // * `OTP_REQUESTS_EXCEEDED` = Number of OTP requests has been exceeded.
  //
  // _Note:_ This API will be invoked in the UPI `ReqRegMob` API flow.
  rpc ValidateRegistration(ValidateRegistrationRequest)
      returns (ValidateRegistrationResponse) {
    option (google.api.http) = {
      post: "/v1/users:validateRegistration"
      body: "*"
    };
  }

  // This is an API to notify the bank's customer via SMS/email when certain
  // actions are taken by the issuer switch, or when it receives certain
  // notifications from the NPCI.
  //
  // There are a few scenarios when this API will be invoked by the issuer
  // switch.
  //
  // 1. The validation of the current M-PIN of a user, and the updating to a new
  //    M-PIN is handled by the issuer switch. The bank adapter is invoked after
  //    the new M-PIN has been updated successfully by the issuer switch for any
  //    further processing by the bank's systems. The NPCI circular RMD-014
  //    requires issuer banks to send an SMS notification to customers when the
  //    UPI M-PIN is successfully set for a user. This is to make the user aware
  //    of any fradulent attempts to modify the user's M-PIN. This SMS
  //    notification could be one of the possible actions taken when this API is
  //    invoked on the Bank Adapter. **Note** that a customer is to be notified
  //    both in the case of a successful update of their M-PIN or when the M-PIN
  //    update fails.
  //
  // 1. The issuer switch performs a number of operations with recurring
  //    (auto-pay) mandates. These include the following operations:
  //
  //    * Creation
  //    * Modification
  //    * Revocation
  //    * Pause
  //    * Unpause
  //
  //    The NPCI circular OC-151 requires the issuer switch to notify the
  //    customer of the success/failure of the operation with an SMS. The
  //    issuer switch will invoke this Bank Adapter API with the details
  //    about the specific operation performed with the recurring (auto-pay)
  //    mandate. The Bank Adapter can then invoke other services to send out
  //    the appropriate SMS notification to the customer.
  //
  // 1. 24 hours before a recurring mandate accepted by a customer is to be used
  //    for a payment settlement, a notification is to be sent to the customer
  //    with details about the mandate that will be executed. The issuer switch
  //    will invoke the bank adapter with all the details about the mandate that
  //    is to be executed in the next 24 hours for further processing by the
  //    bank adapter. This could include the bank adapter invoking the
  //    appropriate services in the bank's backend to notify the customer about
  //    the upcoming mandate execution. The NPCI's `Recurring Mandate Technical
  //    Specification` document describes this requirement. This notification is
  //    to allow the customer to either pause / revoke the mandate, or ensure
  //    that there are sufficient funds available in the account that will be
  //    debited upon mandate execution.
  //
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Account is blocked.
  //
  // * `ACCT_DORMANT` = Account is dormant.
  //
  // * `ACCT_FROZEN` = Account is frozen.
  //
  // * `ACCT_INACTIVE` = Account is inactive.
  //
  // * `ACCT_NOT_FOUND` = Account not found in the bank's systems.
  //
  // _Note:_ This API will be invoked in the UPI `ReqSetCre` API flow, or in the
  // `ReqValCust` (mandate notification) API flow.
  rpc NotifyCustomer(NotifyCustomerRequest) returns (NotifyCustomerResponse) {
    option (google.api.http) = {
      post: "/v1/users:notifyCustomer"
      body: "*"
    };
  }

  // Validates a customer's government issued ID against the KYC (Know Your
  // Customer) details stored by the bank for that customer.
  //
  // The request will contain the following information:
  //
  // 1. ID type and the ID value that needs to be validated.
  // 2. Account type and the account number of the customer.
  //
  // *Note:* Issuer Switch supports only the PAN (Permanent Account Number) ID
  // type in the current release.
  //
  // Set the `valid` field in the response to `TRUE`, if the ID matches the
  // account details of the customer in the request, and to `FALSE` otherwise.
  //
  // This API should return a `400` HTTP status code if it is unable to process
  // the request. The `reason` field in the
  // [ErrorInfo](https://cloud.google.com/apis/design/errors#error_info)
  // response should contain one of the following values:
  //
  // * `ACCT_BLOCKED` = Account is blocked.
  //
  // * `ACCT_DORMANT` = Account is dormant.
  //
  // * `ACCT_FROZEN` = Account is frozen.
  //
  // * `ACCT_INACTIVE` = Account is inactive.
  //
  // * `ACCT_NOT_FOUND` = Account not found in the bank's systems.
  //
  // _Note:_ This API will be invoked in the UPI `ReqValCust` API flow.
  rpc ValidateCustomer(CustomerValidationRequest)
      returns (CustomerValidationResponse) {
    option (google.api.http) = {
      post: "/v1/users:validateCustomer"
      body: "*"
    };
  }
}
