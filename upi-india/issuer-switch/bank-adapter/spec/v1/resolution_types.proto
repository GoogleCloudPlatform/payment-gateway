// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.paymentgateway.issuerswitch.bankadapter.v1;

import "cloud/api_products/payment_gateway/upi_india/bank_adapter/spec/issuer/v1/common_types.proto";
import "cloud/api_products/payment_gateway/upi_india/bank_adapter/spec/issuer/v1/payment_settlement_types.proto";

option java_outer_classname = "ResolutionTypesProto";
option java_multiple_files = true;
option java_package = "com.google.cloud.paymentgateway.issuerswitch.bankadapter.v1";
option go_api_flag = "OPAQUE_V0";

// Individual payment resolution request.
message ResolvePaymentRequest {
  // Type of resolution required to be done by bank in order resolve to an
  // unresolved payment settlement.
  enum ResolutionType {
    // Unspecified resolution type.
    RESOLUTION_TYPE_UNSPECIFIED = 0;
    // Resolve an unresolved debit reversal transaction. The bank adapter
    // service needs to check whether debit reversal was done for the debit
    // specified in _original settle payment info_. If it was unsuccessful,
    // then bank adapter or banks systems should resolve it by performing the
    // debit reversal.
    RESOLVE_DEBIT_REVERSAL = 1;
    // Resolve an unresolved credit transaction. The bank adapter service needs
    // to check whether the credit specified in _original settle payment info_
    // was successful. If it was unsuccessful, then bank adapter or bank's
    // systems should resolve the settlement by performing the credit.
    RESOLVE_CREDIT = 2;
  }

  // Type of payment resolution workflow. This indicates the UPI workflow
  // which triggered this request.
  enum ResolutionWorkflow {
    // Unspecified resolution workflow.
    RESOLUTION_WORKFLOW_UNSPECIFIED = 0;
    // UPI's auto-update workflow.
    AUTOUPDATE_WORKFLOW = 1;
    // UPI's complaint workflow.
    COMPLAINT_WORKFLOW = 2;
  }

  // Type of resolution to execute.
  ResolutionType resolution_type = 1;
  // Details of the original payment debit / credit settlement which needs to be
  // resolved.
  SettlePaymentRequest original_settle_payment_info = 2;
  // Type of resolution workflow which triggered this request.
  ResolutionWorkflow resolution_workflow = 3;
  // If this request's _resolution workflow_ is `COMPLAINT`, then details of the
  // complaint raised by the user/bank will be provided in this field.
  CaseDetails case_details = 4;
}

// The response to be returned by the bank adapter once the resolve payment
// request is executed.
message ResolvePaymentResponse {
  // Describes the status of payment resolution.
  enum ResolutionStatus {
    // Unspecified resolution state.
    STATE_UNSPECIFIED = 0;
    // Successful resolution.
    SUCCEEDED = 1;
    // Failed resolution.
    FAILED = 2;
  }
  // Resolve Payment result. Can indicate either a success or an error during
  // resolution of an unresolved payment settlement.
  ResolvePaymentResult resolve_payment_response = 1;
  // The status of the resolution.
  ResolutionStatus resolution_status = 2;
}

// Result of resolution of an unresolved payment settlement. Can be one of
// either a success or an error response.
message ResolvePaymentResult {
  // Resolve payment result can be either success or error.
  oneof resolve_payment_result {
    // Describes the payment adjustment done by the banks to successfully
    // resolve an unresolved payment settlement.
    PaymentAdjustmentResponse success = 1;
    // Describes the error due to which an unresolved payment settlement
    // couldn't be resolved.
    PaymentAdjustmentError error = 2;
  }
}

// Information about the adjustment done by the bank adapter to resolve an
// unresolved transaction.
message PaymentAdjustmentResponse {
  // Type of adjustment action done by bank adapter service to resolve an
  // unresolved transaction.
  enum AdjustmentType {
    // Adjustment type unspecified.
    ADJUSTMENT_TYPE_UNSPECIFIED = 0;
    // This indicates that the payment settlement transaction was already
    // successfully resolved at the bank adapter service's end i.e. debit
    // reversal/credit needed to resolve transaction was already done.
    TRANSACTION_ALREADY_RESOLVED = 1;
    // This indicates that payment settlement transaction was resolved now
    // during execution of _resolve payment request_ sent to bank adapter
    // service. In this case, the response should contain the
    // _settlement response_ indicating the details of the debit
    // reversal/credit done to resolve the transaction.
    TRANSACTION_RESOLVED_NOW = 2;
    // This type indicates that the original failed debit/credit transaction
    // cannot be found by the bank adapter service.
    ORIGINAL_TRANSACTION_NOT_FOUND = 4;
    // This type indicates that original transaction was not executed on the
    // bank's services. This code should be used only for _resolution type_
    // `RESOLVE_DEBIT_REVERSAL` where the original debit settlement didn't
    // occur.
    ORIGINAL_TRANSACTION_DID_NOT_OCCUR = 3;
  }

  // Specifies additional metadata associated with an adjustment done by bank to
  // resolve an unresolved transaction.
  message AdjustmentMetadata {
    // This uniquely identifies the adjustment done by bank adapter service
    // to resolve a transaction.
    string adjustment_id = 1;
    // Free form text to describe any adjustment remarks.
    string adjustment_remarks = 2;
  }

  // Type of adjustment done to resolve an unresolved transaction.
  AdjustmentType type = 1;
  // Metadata of the adjustment done.
  AdjustmentMetadata metadata = 2;
  // Settlement related information if a settlement was done to resolve an
  // unresolved transaction.
  SettlePaymentResponse settlement_response = 3;
}

// Error found during execution of an individual payment resolution.
message PaymentAdjustmentError {
  // Error reason.
  ErrorReason error_reason = 1;
}